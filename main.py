import discord
from discord.ext import commands
import json
import asyncio
import aiofiles
import pytz
from datetime import datetime, timedelta
from collections import defaultdict


exams = '—É—Å—Ç–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω + test arest'


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Discord –±–æ—Ç–∞
intents = discord.Intents.default()
# intents.members = True  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–∏–ª—å–¥–∏–∏
intents.messages = True  # –í–∫–ª—é—á–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
intents.message_content = True  # –í–∫–ª—é—á–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π
intents.members = True
bot = commands.Bot(command_prefix='!', intents=intents)

async def load_config():
    async with aiofiles.open('config.json', 'r') as f:
        config_data = await f.read()
    return json.loads(config_data)


@bot.event
async def on_ready():
    print(f'–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}')
    config = await load_config()
    global head_sai, curator_sai, sai_role
    head_sai = config["head_sai"] # –ü—Ä–∏–º–µ—Ä —Ä–æ–ª–∏, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–æ–ª—å
    curator_sai = config["curator_sai"]  # –ü—Ä–∏–º–µ—Ä —Ä–æ–ª–∏, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–æ–ª—å
    sai_role = config["role_id"]

tz_moscow = pytz.timezone('Europe/Moscow')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—É–±–±–æ—Ç—ã –≤ 22:00 –ø–æ –ú–°–ö
def get_last_saturday():
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
    now_msk = datetime.now(tz_moscow)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—É–±–±–æ—Ç—ã
    days_since_saturday = (now_msk.weekday() - 5) % 7  # 5 - —Å—É–±–±–æ—Ç–∞

    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞, –±–µ—Ä—ë–º –ø—Ä–µ–¥—ã–¥—É—â—É—é
    if days_since_saturday == 0:
        days_since_saturday = 7  

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø—Ä–æ—à–ª–æ–π —Å—É–±–±–æ—Ç—ã
    last_saturday = now_msk - timedelta(days=days_since_saturday)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è 22:00
    last_saturday_at_22_00 = last_saturday.replace(hour=22, minute=0, second=0, microsecond=0)

    return last_saturday_at_22_00.astimezone(tz_moscow)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ú–°–ö


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–≤—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.command()
async def count_authors(ctx):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    has_role = any(role.id in (head_sai, curator_sai) for role in ctx.author.roles)

    if not has_role:
        msg = await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        await asyncio.sleep(4)
        await msg.delete()
        return
    
    await ctx.message.delete()
    
    last_saturday = get_last_saturday()
    now_msk = datetime.now(tz_moscow)

    # –î–µ–ª–∞–µ–º –Ω–∞–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
    last_saturday_naive = last_saturday.replace(tzinfo=None)
    now_msk_naive = now_msk.replace(tzinfo=None)

    message_counts = defaultdict(int)

    async for message in ctx.channel.history(after=last_saturday_naive, before=now_msk_naive, limit=1000):  
        user_id = message.author.id
        message_counts[user_id] += 1

    if not message_counts:
        await ctx.send("‚ö†Ô∏è –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    
    other_tags = 0

    response = f"üìä  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–µ—Ä–∏–æ–¥ —Å **{str(last_saturday_naive.day).zfill(2)}-{str(last_saturday_naive.month).zfill(2)} {str(last_saturday_naive.hour).zfill(2)}:{str(last_saturday_naive.minute).zfill(2)}** –ø–æ **{str(now_msk.day).zfill(2)}-{str(now_msk.month).zfill(2)} {str(now_msk.hour).zfill(2)}:{str(now_msk.minute).zfill(2)}:**\n"
    for user_id, count in message_counts.items():
        member = ctx.guild.get_member(user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

        if member:
            global username
            username = member.display_name  # –ù–∏–∫–Ω–µ–π–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        else:
            user = await bot.fetch_user(user_id)  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–µ—Å–ª–∏ –Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
            username = user.name  # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –∏–º—è
            other_tags +=1

        response += f"**{username}**: **{count}** —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        
    response += f"\n–î—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: **{other_tags}** —Å–æ–æ–±—â–µ–Ω–∏–π\n" + f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: **{sum(message_counts.values()) + other_tags}** —Å–æ–æ–±—â–µ–Ω–∏–π"
    await ctx.author.send(response)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
@bot.command()
async def count_mentions(ctx):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    has_role = any(role.id in (head_sai, curator_sai) for role in ctx.author.roles)

    if not has_role:
        msg = await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        await asyncio.sleep(4)
        await msg.delete()
        return
    
    await ctx.message.delete()
    
        
    last_saturday = get_last_saturday()
    now_msk = datetime.now(tz_moscow)

    # –î–µ–ª–∞–µ–º –Ω–∞–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
    last_saturday_naive = last_saturday.replace(tzinfo=None)
    now_msk_naive = now_msk.replace(tzinfo=None)

    mention_counts = defaultdict(int)
    all_tags = 0
    other_tags = 0

    async for message in ctx.channel.history(after=last_saturday_naive, before=now_msk_naive):
        for user in message.mentions:
            member = ctx.guild.get_member(user.id)
            if member:
                has_role_ = any(role.id == sai_role for role in member.roles)

                if has_role_:
                    if exams in message.content.lower():
                        mention_counts[user.id] += 2
                        all_tags += 2
                    else:
                        mention_counts[user.id] += 1
                        all_tags += 1
                else:
                    all_tags += 1
                    other_tags += 1

    if not mention_counts:
        await ctx.send(f"‚ö†Ô∏è –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    else:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        response = f"üìä  –†–µ–∑—É–ª—å—Ç–∞—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ø–µ—Ä–∏–æ–¥ —Å **{str(last_saturday_naive.day).zfill(2)}-{str(last_saturday_naive.month).zfill(2)} {str(last_saturday_naive.hour).zfill(2)}:{str(last_saturday_naive.minute).zfill(2)}** –ø–æ **{str(now_msk.day).zfill(2)}-{str(now_msk.month).zfill(2)} {str(now_msk.hour).zfill(2)}:{str(now_msk.minute).zfill(2)}:**\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        sorted_mentions = sorted(mention_counts.items(), key=lambda x: x[1], reverse=True)

        for user_id, count in sorted_mentions:
            member = ctx.guild.get_member(user_id)  # –ü–æ–ª—É—á–∞–µ–º member, –∞ –Ω–µ user, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            if member:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ member –Ω–∞–π–¥–µ–Ω
                response += f"**{member.display_name}**: **{count}** —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"  # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º member.display_name –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º
        response += f"\n–î—Ä—É–≥–∏—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: **{other_tags}** —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        response += f"–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: **{all_tags}** —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        

        await ctx.author.send(response)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
@bot.command()
async def count_reactions(ctx):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    has_role = any(role.id in (head_sai, curator_sai) for role in ctx.author.roles)

    if not has_role:
        msg = await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        await asyncio.sleep(4)  # –ñ–¥—ë–º 7 —Å–µ–∫—É–Ω–¥
        await msg.delete()
        return
    
    await ctx.message.delete()
    last_saturday = get_last_saturday()
    now_msk = datetime.now(tz_moscow)

    # –î–µ–ª–∞–µ–º –Ω–∞–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
    last_saturday_naive = last_saturday.replace(tzinfo=None)
    now_msk_naive = now_msk.replace(tzinfo=None)

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–µ–∞–∫—Ü–∏–π
    reaction_counts = defaultdict(int)
    other_tags = 0

    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
    async for message in ctx.channel.history(after=last_saturday_naive, before=now_msk_naive):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç–æ–º –∏–ª–∏ –≤–µ–±—Ö—É–∫–æ–º
        if message.author.bot or message.webhook_id:
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ä–µ–∞–∫—Ü–∏—è–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for reaction in message.reactions:
                async for user in reaction.users():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–∞—è —Ä–æ–ª—å
                    has_role_ = any(role.id == sai_role for role in user.roles)

                    if has_role_:
                        reaction_counts[user.id] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    else:
                        other_tags += 1

    # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–∫—Ü–∏–π
    if not reaction_counts:
        await ctx.send("‚ö†Ô∏è –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∞–∫—Ü–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–∂–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏.")
        return
    else:
        response = f"üìä  –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –≤ –ø–µ—Ä–∏–æ–¥ —Å **{str(last_saturday_naive.day).zfill(2)}-{str(last_saturday_naive.month).zfill(2)} {str(last_saturday_naive.hour).zfill(2)}:{str(last_saturday_naive.minute).zfill(2)}** –ø–æ **{str(now_msk.day).zfill(2)}-{str(now_msk.month).zfill(2)} {str(now_msk.hour).zfill(2)}:{str(now_msk.minute).zfill(2)}:**\n"
        for user_id, count in reaction_counts.items():
            # user = await bot.fetch_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # username = user.display_name if user else user.name  # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            member = ctx.guild.get_member(user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

            if member:
                username = member.display_name  # –ù–∏–∫–Ω–µ–π–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            else:
                user = await bot.fetch_user(user_id)  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–µ—Å–ª–∏ –Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
                username = user.name  # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –∏–º—è
            response += f"**{username}**: **{count}** —Ä–µ–∞–∫—Ü–∏–∏\n"
        
        response += f"\n–î—Ä—É–≥–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: **{other_tags}** —Ä–µ–∞–∫—Ü–∏–π\n" + f"–í—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π: **{sum(reaction_counts.values()) + other_tags}** —Ä–µ–∞–∫—Ü–∏–π"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    await ctx.author.send(response)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏–π
@bot.command()
async def count_invites(ctx):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    has_role = any(role.id in (head_sai, curator_sai) for role in ctx.author.roles)

    if not has_role:
        msg = await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        await asyncio.sleep(4)  # –ñ–¥—ë–º 7 —Å–µ–∫—É–Ω–¥
        await msg.delete()
        return
    
    await ctx.message.delete()
    
    last_saturday = get_last_saturday()
    now_msk = datetime.now(tz_moscow)

    # –î–µ–ª–∞–µ–º –Ω–∞–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
    last_saturday_naive = last_saturday.replace(tzinfo=None)
    now_msk_naive = now_msk.replace(tzinfo=None)

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    mention_counts = defaultdict(int)

    other_tags = 0
    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
    async for message in ctx.channel.history(after=last_saturday_naive, before=now_msk_naive):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç–æ–º
        if message.author.bot:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–æ–≤–æ '–ø—Ä–∏–Ω–∏–º–∞–µ—Ç'
            if "–ø—Ä–∏–Ω–∏–º–∞–µ—Ç" in message.content.lower():
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                for user in message.mentions:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–∞—è —Ä–æ–ª—å
                    has_role_ = any(role.id == sai_role for role in user.roles)

                    if has_role_:
                        mention_counts[user.id] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ï—Å–ª–∏ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if not mention_counts:
        await ctx.send("‚ö†Ô∏è –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –Ω—É–∂–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"üìä  –ü—Ä–∏–Ω—è—Ç–æ –ª—é–¥–µ–π –≤ –ø–µ—Ä–∏–æ–¥ —Å **{str(last_saturday_naive.day).zfill(2)}-{str(last_saturday_naive.month).zfill(2)} {str(last_saturday_naive.hour).zfill(2)}:{str(last_saturday_naive.minute).zfill(2)}** –ø–æ **{str(now_msk.day).zfill(2)}-{str(now_msk.month).zfill(2)} {str(now_msk.hour).zfill(2)}:{str(now_msk.minute).zfill(2)}:**\n"
    for user_id, count in mention_counts.items():
            member = ctx.guild.get_member(user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

            if member:
                username = member.display_name  # –ù–∏–∫–Ω–µ–π–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            else:
                user = await bot.fetch_user(user_id)  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–µ—Å–ª–∏ –Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
                username = user.name  # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –∏–º—è
            response += f"**{username}**: **{count}** –ø—Ä–∏–Ω—è—Ç–∏–π\n"
    response += f"\n–î—Ä—É–≥–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è: **{other_tags}** –ø—Ä–∏–Ω—è—Ç–∏–π\n" + f"–í—Å–µ–≥–æ –ø—Ä–∏–Ω—è—Ç–æ: **{sum(mention_counts.values()) + other_tags}** —á–µ–ª–æ–≤–µ–∫"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    await ctx.author.send(response)


bot.run(TOKEN)
