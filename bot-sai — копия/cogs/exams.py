import discord
from discord.ext import commands, tasks
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
import aiofiles
import asyncio
import pytz
import re
from datetime import datetime
from discord.ui import Button, View, Modal, TextInput
from discord.utils import get

async def load_config():
    async with aiofiles.open('config.json', 'rb') as f:
        config_data = await f.read()
    return json.loads(config_data)

# –ü–æ–∏—Å–∫   
def extract_name_from_app(full_name: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ —Å—Ç—Ä–æ–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ —á–∏—Å–ª–∞, –Ω–æ –Ω–µ —É–¥–∞–ª—è—è I –∏ l –≤–Ω—É—Ç—Ä–∏ –∏–º–µ–Ω–∏."""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º (|, /, \), –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º I –∏ l –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤
    full_name = re.sub(r'\s*[|/\\]\s*', ' ', full_name)  # –£–±–∏—Ä–∞–µ–º |, /, \ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    full_name = re.sub(r'\s+[Il]\s+', ' ', full_name)  # –£–±–∏—Ä–∞–µ–º I –∏ l —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –æ–∫—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–µ–ª–∞–º–∏
    
    # –£–¥–∞–ª—è–µ–º —á–∏—Å–ª–∞
    full_name = re.sub(r'\d+', '', full_name).strip()

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
    words = [word for word in full_name.split() if word.isalpha()]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–ø–µ—Ä–≤—ã–µ –¥–≤–∞ —Å–ª–æ–≤–∞)
    return " ".join(words[:2]) if len(words) >= 2 else ""

def extract_name_from_nick(nick: str):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, SAI, SA, D.Head –∏ —Ç. –¥.)
    nick = re.sub(r'^(SAI|SA|D\.Head|Head|Cur\.|Ass\.Shr\.)\s+', '', nick).strip()
    # –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    nick = re.sub(r'^[^|/\\]*[|/\\]\s*', '', nick).strip()
    # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (|, /, \) –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    nick = re.sub(r'\s*[|/\\]+\s*', ' ', nick).strip()
    # –£–±–∏—Ä–∞–µ–º "I" –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    nick = re.sub(r'^I\s+|(?<=\s)I(?=\s)', '', nick).strip()
    # –£–¥–∞–ª—è–µ–º ID (—Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ)
    nick = re.sub(r'\s+\d+$', '', nick).strip()

    return nick

async def find_user_by_name(guild, name_status):
    exam_name = extract_name_from_app(name_status)  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ –∑–∞—è–≤–∫–∏
    
    if not exam_name:
        return None  # –ï—Å–ª–∏ –≤ –∑–∞—è–≤–∫–µ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

    for member in guild.members:
        discord_name = extract_name_from_nick(member.display_name)  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ –Ω–∏–∫–∞ –≤ Discord
        
        if discord_name.lower() == exam_name.lower():
            return member  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞
    
    return None  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

async def extract_name_and_id(nick: str):

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, SAI, SA, D.Head –∏ —Ç. –¥.)
    nick = re.sub(r'^(SAI|SA|D\.Head|Head|Cur\.|Ass\.Shr\.)\s+', '', nick).strip()
    # –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    nick = re.sub(r'^[^|/\\]*[|/\\]\s*', '', nick).strip()
    # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (|, /, \) –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    nick = re.sub(r'\s*[|/\\]+\s*', ' ', nick).strip()
    # –£–±–∏—Ä–∞–µ–º "I" –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    nick = re.sub(r'^I\s+|(?<=\s)I(?=\s)', '', nick).strip()
    # –£–¥–∞–ª—è–µ–º ID (—Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ)
    # nick = re.sub(r'\s+\d+$', '', nick).strip()

    cleaned_nick = nick.rsplit(' ', 1)
    name = cleaned_nick[0].strip()
    static = cleaned_nick[1].strip()
    return name, static


class Exams(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.client = self.init_gspread()
        self.sheet = None
        self.channel = None
        self.role_mention = None
        self.role_id = None
        self.head_sai = None
        self.exam_link = None
        self.results_link = None
        self.active_sessions = {}


    def get_msk_time(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è."""
        tz_moscow = pytz.timezone('Europe/Moscow')
        return datetime.now(tz_moscow).strftime("%H:%M")

    def init_gspread(self):
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
        return gspread.authorize(creds)

    async def load_config(self):
        async with aiofiles.open('config.json', 'rb') as f:
            config_data = await f.read()
        
        global config
        config = json.loads(config_data)

        self.channel = self.bot.get_channel(config["channel_id"])
        self.role_mention = config["role_mention"]
        self.role_id = config["role_id"]
        self.head_sai = config["head_sai"]
        self.exam_link = config["exam_link"]
        self.results_link = config["results_link"]
        self.results_id = config["results_id"]
        global head_sai
        head_sai = config["head_sai"]

        # üé≠ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏
        self.custom_yes = config["custom_yes"]
        self.custom_no = config["custom_no"]
        self.custom_wait = config["custom_wait"]

        try:
            self.sheet = self.client.open_by_key(config["sheet_id"]).sheet1
            print("‚úÖ Google-—Ç–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

        if self.channel is None:
            print(f"–ö–∞–Ω–∞–ª —Å ID {config['channel_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        self.check_new_rows.start()

    @tasks.loop(seconds=60)
    async def check_new_rows(self):
        if not self.sheet or not self.channel:
            return

        try:
            data = self.sheet.get_all_values()
            for i, row in enumerate(data[1:], start=2):
                if len(row) < 4:
                    continue

                text1, text2, status = row[1].strip(), row[2].strip(), row[3].strip().lower()

                if text1 and text2 and status in ["", "false"]:
                    await self.send_to_discord(text1, text2)
                    self.sheet.update_cell(i, 4, "TRUE")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã: {e}")

    async def send_to_discord(self, text1, text2):
        session = ExamSession(self, text1, text2)
        await session.send_exam(self.channel)

    @commands.Cog.listener()
    async def on_ready(self):
        await self.load_config()

class ExamSession:
    def __init__(self, cog, text1, text2):
        self.cog = cog
        self.text1 = text1
        self.text2 = text2
        self.exam_type = text2
        self.view = View()
        self.finish_view = View()
        self.msg = None

    async def send_exam(self, channel):
        embed = discord.Embed(title="–ù–æ–≤–∞—è –ó–∞–ø–∏—Å—å –Ω–∞ —ç–∫–∑–∞–º–µ–Ω!", color=0x00ff00)
        embed.add_field(name="–ò–º—è –§–∞–º–∏–ª–∏—è | –°—Ç–∞—Ç–∏–∫", value=self.text1, inline=False)
        embed.add_field(name="–ö–∞–∫–æ–π —ç–∫–∑–∞–º–µ–Ω —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞–≤–∞—Ç—å?", value=self.text2, inline=False)
        embed.set_footer(text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {self.cog.get_msk_time()} (–ú–°–ö)")

        button = Button(label="–ü—Ä–∏–Ω—è—Ç—å —ç–∫–∑–∞–º–µ–Ω", style=discord.ButtonStyle.green)
        button.callback = self.on_accept_exam
        cancel_button = Button(label="–û—Ç–º–µ–Ω–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω", style=discord.ButtonStyle.danger)
        cancel_button.callback = self.on_cancel_exam

        self.view.add_item(button)
        self.view.add_item(cancel_button)

        self.msg = await channel.send(content=self.cog.role_mention, embed=embed, view=self.view)

    async def on_accept_exam(self, interaction):
        await interaction.response.defer()  # –û–∂–∏–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

        exam_candidate_name = self.text1  
        exam_candidate = await find_user_by_name(interaction.guild, exam_candidate_name)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç
        if exam_candidate:
            candidate_mention = exam_candidate.mention
            self.candidate_mention = candidate_mention  
        else:
            candidate_mention = ""
            self.candidate_mention = ""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏
        allowed_roles = {self.cog.role_id, self.cog.head_sai}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.cog.*
        user_roles = {role.id for role in interaction.user.roles}  

        if not allowed_roles & user_roles:  
            await interaction.followup.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —ç–∫–∑–∞–º–µ–Ω–∞.", ephemeral=True)
            return

        if self.candidate_mention == "":
            await interaction.followup.send("–ù–∏–∫ –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –û—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–∞–¥–µ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–∏–∫ –≤ –∑–∞—è–≤–∫–µ.", ephemeral=True)
            return

        # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è —ç–∫–∑–∞–º–µ–Ω–∞
        for item in self.view.children:
            if isinstance(item, discord.ui.Button):
                self.view.remove_item(item)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await interaction.message.edit(view=self.view)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–Ω—è–≤—à–µ–≥–æ —ç–∫–∑–∞–º–µ–Ω
        self.accepted_by = interaction.user.id

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞
        finish_button = Button(label="–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω", style=discord.ButtonStyle.green)
        finish_button.callback = self.on_finish_exam  

        no_show_button = Button(label="–ù–µ –ø—Ä–∏—à—ë–ª(–∞)", style=discord.ButtonStyle.danger)
        no_show_button.callback = self.on_no_show  

        self.finish_view.add_item(finish_button)
        self.finish_view.add_item(no_show_button)

        await self.msg.add_reaction(self.cog.custom_wait)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await interaction.followup.send(
            f"{interaction.user.mention} –ø—Ä–∏–Ω—è–ª —ç–∫–∑–∞–º–µ–Ω. –≠–∫–∑–∞–º–µ–Ω—É–µ–º—ã–π, {candidate_mention} –ø—Ä–æ—Å—å–±–∞ –≤–æ–π—Ç–∏ –≤: {self.cog.exam_link}. "
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –í–∞—Å 5 –º–∏–Ω—É—Ç.", view=self.finish_view)

    async def on_finish_exam(self, interaction: discord.Interaction):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω
            member = interaction.guild.get_member(interaction.user.id)
            exam_admin_role = discord.utils.get(member.roles, id=self.cog.head_sai)

            if interaction.user.id != self.accepted_by and not exam_admin_role:
                await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ—Ç —ç–∫–∑–∞–º–µ–Ω.", ephemeral=True)
                return

            exam_candidate_name = self.text1
            exam_candidate = await find_user_by_name(interaction.guild, exam_candidate_name)

            if exam_candidate:
                candidate_mention = exam_candidate.mention
                self.candidate_mention = candidate_mention
            else:
                candidate_mention = ""
                self.candidate_mention = ""

            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            for item in self.finish_view.children:
                if isinstance(item, discord.ui.Button):
                    item.disabled = True

            await interaction.message.edit(view=self.finish_view)

            await self.msg.clear_reactions()
            await self.msg.add_reaction(self.cog.custom_yes)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            await interaction.response.send_modal(
                ExamCompletionModal(
                    self, exam_candidate, self.candidate_mention, self.finish_view, self.cog.results_link, self.exam_type, interaction.guild, self.text1, self.text2
                )
            )

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ on_finish_exam: {e}")
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

    async def on_no_show(self, interaction: discord.Interaction):
        try:
            member = interaction.guild.get_member(interaction.user.id)
            exam_admin_role = discord.utils.get(member.roles, id=self.cog.head_sai)

            if interaction.user.id != self.accepted_by and not exam_admin_role:
                await interaction.response.send_message("–¢–æ–ª—å–∫–æ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–µ—è–≤–∫—É.", ephemeral=True)
                return

            exam_candidate_name = self.text1  
            exam_candidate = await find_user_by_name(interaction.guild, exam_candidate_name)

            if exam_candidate:
                candidate_mention = exam_candidate.mention
                self.candidate_mention = candidate_mention  
            else:
                self.candidate_mention = ""

            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
            for item in self.finish_view.children:
                if isinstance(item, discord.ui.Button):
                    item.disabled = True

            await interaction.message.edit(view=self.finish_view)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏

            await self.msg.clear_reactions()
            await self.msg.add_reaction(self.cog.custom_no)

            await interaction.response.send_message(f"{candidate_mention} –Ω–µ —è–≤–∏–ª—Å—è –Ω–∞ —ç–∫–∑–∞–º–µ–Ω. –≠–∫–∑–∞–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω.")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ on_no_show: {e}")
            await interaction.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", ephemeral=True)

    async def on_cancel_exam(self, interaction: discord.Interaction):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏
        allowed_roles = {self.cog.role_id, self.cog.head_sai}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.cog.*
        user_roles = {role.id for role in interaction.user.roles}  

        if not allowed_roles & user_roles:  
            await interaction.followup.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —ç–∫–∑–∞–º–µ–Ω–∞.", ephemeral=True)
            return

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–º–µ–Ω—ã —ç–∫–∑–∞–º–µ–Ω–∞
        await interaction.response.send_modal(CancelExamModal(self))



class ExamCompletionModal(Modal):
    def __init__(self, exam_session, exam_candidate, candidate_mention, finish_view, results_link, exam_type, guild, text1, text2):
        super().__init__(title="–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞")
        self.exam_session = exam_session
        self.exam_candidate = exam_candidate
        self.candidate_mention = candidate_mention
        self.finish_view = finish_view
        self.results_link = results_link
        self.exam_type = exam_type  
        self.guild = guild
        self.text1 = text1
        self.text2 = text2

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result = TextInput(label="–†–µ–∑—É–ª—å—Ç–∞—Ç", placeholder="–°–¥–∞–ª(–∞) / –ù–µ —Å–¥–∞–ª(–∞)", required=True)
        self.add_item(self.result)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            await interaction.response.defer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            exam_result = self.result.value.capitalize()

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_channel = interaction.guild.get_channel(int(self.exam_session.cog.results_id))

            if not results_channel:
                await interaction.followup.send("–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º—ã
            self.exam_candidate = await find_user_by_name(self.guild, self.text1)
            if self.exam_candidate:
                self.candidate_mention = self.exam_candidate.mention
            else:
                self.candidate_mention = "–ù–µ –Ω–∞–π–¥–µ–Ω"

            nick_sai, static_sai = await extract_name_and_id(interaction.user.display_name)
            nick_sa, static_sa = await extract_name_and_id(self.exam_candidate.display_name)

            if results_channel:
                await results_channel.send(
                    f"1. {interaction.user.mention} | {nick_sai} | {static_sai} \n"
                    f"2. {self.exam_candidate.mention} | {nick_sa} | {static_sa} \n"
                    f"3. {exam_result} {self.exam_type.lower()} \n"
                )
            else:
                await interaction.response.send_message("–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                return

            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
            for item in self.finish_view.children:
                if isinstance(item, discord.ui.Button):
                    item.disabled = True

            await interaction.message.edit(view=self.finish_view)
            await interaction.followup.send(f"{interaction.user.mention} –∑–∞–≤–µ—Ä—à–∏–ª —ç–∫–∑–∞–º–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ {self.exam_session.cog.results_link}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ on_submit: {e}")
            await interaction.followup.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", ephemeral=True)


class CancelExamModal(Modal):
    def __init__(self, exam_session):
        super().__init__(title="–û—Ç–º–µ–Ω–∞ —ç–∫–∑–∞–º–µ–Ω–∞")
        self.exam_session = exam_session
        self.reason = TextInput(label="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã", placeholder="–ü—Ä–∏–º–µ—Ä: –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–∏–∫–Ω–µ–π–º.", required=True)
        self.add_item(self.reason)

    async def on_submit(self, interaction: discord.Interaction):
        # # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω
        # allowed_roles = {self.exam_session.cog.role_id, self.exam_session.cog.head_sai}
        # user_roles = {role.id for role in interaction.user.roles}

        # if allowed_roles & user_roles:
        #     await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —ç–∫–∑–∞–º–µ–Ω–∞.", ephemeral=True)
        #     return

        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        for item in self.view.children:
            if isinstance(item, discord.ui.Button):
                item.disabled = True

        await self.exam_session.msg.edit(view=self.exam_session.view)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏

        await self.exam_session.msg.clear_reactions()
        await self.exam_session.msg.add_reaction(self.exam_session.cog.custom_no)  # ‚ùå –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —ç–º–æ–¥–∑–∏

        await interaction.response.send_message(
            f"‚ùå –≠–∫–∑–∞–º–µ–Ω –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏—á–∏–Ω–µ: **{self.reason.value}**\n"
            f"-# *–û—Ç–º–µ–Ω—ë–Ω –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º {interaction.user.mention}*."
        )


async def setup(bot):
    await bot.add_cog(Exams(bot))
